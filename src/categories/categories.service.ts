import {
  Injectable,
  NotFoundException,
  ForbiddenException,
} from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Category } from './category.entity';
import { CreateCategoryDto } from './dto/create-category.dto';
import { UpdateCategoryDto } from './dto/update-category.dto';

@Injectable()
export class CategoriesService {
  constructor(
    @InjectRepository(Category)
    private categoriesRepository: Repository<Category>,
  ) {}

  async create(userId: string, createCategoryDto: CreateCategoryDto): Promise<Category> {
    const category = this.categoriesRepository.create({
      ...createCategoryDto,
      userId,
    });

    return this.categoriesRepository.save(category);
  }

  async findAll(userId: string): Promise<Category[]> {
    return this.categoriesRepository.find({
      where: { userId },
      order: { name: 'ASC' },
    });
  }

  async findActive(userId: string): Promise<Category[]> {
    return this.categoriesRepository.find({
      where: { userId, isActive: true },
      order: { name: 'ASC' },
    });
  }

  async findOne(id: string, userId: string): Promise<Category> {
    const category = await this.categoriesRepository.findOne({
      where: { id, userId },
    });

    if (!category) {
      throw new NotFoundException('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    return category;
  }

  async update(
    id: string,
    userId: string,
    updateCategoryDto: UpdateCategoryDto,
  ): Promise<Category> {
    const category = await this.findOne(id, userId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    if (category.isDefault) {
      throw new ForbiddenException('–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
    }

    Object.assign(category, updateCategoryDto);
    return this.categoriesRepository.save(category);
  }

  async remove(id: string, userId: string): Promise<void> {
    const category = await this.findOne(id, userId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    if (category.isDefault) {
      throw new ForbiddenException('–ù–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
    const transactionCount = await this.categoriesRepository
      .createQueryBuilder('category')
      .leftJoin('category.transactions', 'transaction')
      .where('category.id = :id', { id })
      .getCount();

    if (transactionCount > 0) {
      // –í–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
      category.isActive = false;
      await this.categoriesRepository.save(category);
    } else {
      await this.categoriesRepository.remove(category);
    }
  }

  async createDefaultCategories(userId: string): Promise<Category[]> {
    const defaultCategories = [
      {
        name: '–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è',
        description: '–†–∞—Å—Ö–æ–¥—ã –Ω–∞ –µ–¥—É –∏ –Ω–∞–ø–∏—Ç–∫–∏',
        color: '#ff6b6b',
        icon: 'üçï',
        isDefault: true,
      },
      {
        name: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
        description: '–†–∞—Å—Ö–æ–¥—ã –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
        color: '#4ecdc4',
        icon: 'üöó',
        isDefault: true,
      },
      {
        name: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
        description: '–†–∞—Å—Ö–æ–¥—ã –Ω–∞ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
        color: '#45b7d1',
        icon: 'üé¨',
        isDefault: true,
      },
      {
        name: '–ó–¥–æ—Ä–æ–≤—å–µ',
        description: '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã',
        color: '#96ceb4',
        icon: 'üè•',
        isDefault: true,
      },
      {
        name: '–ó–∞—Ä–ø–ª–∞—Ç–∞',
        description: '–î–æ—Ö–æ–¥—ã –æ—Ç —Ä–∞–±–æ—Ç—ã',
        color: '#feca57',
        icon: 'üí∞',
        isDefault: true,
      },
      {
        name: '–î—Ä—É–≥–æ–µ',
        description: '–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –∏ –¥–æ—Ö–æ–¥—ã',
        color: '#a55eea',
        icon: 'üì¶',
        isDefault: true,
      },
    ];

    const categories = defaultCategories.map(categoryData =>
      this.categoriesRepository.create({
        ...categoryData,
        userId,
      }),
    );

    return this.categoriesRepository.save(categories);
  }
}